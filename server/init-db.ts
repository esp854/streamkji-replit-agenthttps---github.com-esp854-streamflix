import { config } from "dotenv";
import { Client } from 'pg';
import { drizzle } from 'drizzle-orm/node-postgres';
import * as schema from "@shared/schema";

// Charger les variables d'environnement
config();

async function initDatabase() {
  console.log("üîß Initialisation de la base de donn√©es...");
  
  const databaseUrl = process.env.DATABASE_URL;
  if (!databaseUrl) {
    console.error("‚ùå DATABASE_URL n'est pas d√©finie dans .env");
    process.exit(1);
  }
  
  // Configure SSL based on environment
  const isRender = process.env.RENDER || process.env.NODE_ENV === 'production';
  const sslConfig = isRender ? {
    rejectUnauthorized: false // n√©cessaire sur Render
  } : false;
  
  // Extraire les composants de l'URL
  const url = new URL(databaseUrl);
  const dbName = url.pathname.substring(1);
  const dbUser = url.username;
  const dbPassword = url.password;
  const dbHost = url.hostname;
  const dbPort = url.port;
  
  console.log(`üìç Configuration: ${dbUser}@${dbHost}:${dbPort}/${dbName}`);
  
  // Cr√©er une connexion sans sp√©cifier la base de donn√©es pour cr√©er la base
  const adminClient = new Client({
    connectionString: databaseUrl,
    ssl: sslConfig
  });
  
  try {
    await adminClient.connect();
    console.log("‚úÖ Connexion √† PostgreSQL r√©ussie");
    
    // V√©rifier si la base de donn√©es existe
    const dbCheck = await adminClient.query(
      "SELECT 1 FROM pg_database WHERE datname = $1", 
      [dbName]
    );
    
    if (dbCheck.rowCount === 0) {
      console.log(`üèóÔ∏è  Cr√©ation de la base de donn√©es '${dbName}'...`);
      await adminClient.query(`CREATE DATABASE "${dbName}"`);
      console.log("‚úÖ Base de donn√©es cr√©√©e avec succ√®s");
    } else {
      console.log(`‚ÑπÔ∏è  La base de donn√©es '${dbName}' existe d√©j√†`);
    }
    
    await adminClient.end();
    
    // Maintenant se connecter √† la base de donn√©es sp√©cifique
    const dbClient = new Client({
      connectionString: databaseUrl,
      ssl: sslConfig
    });
    
    await dbClient.connect();
    console.log(`‚úÖ Connect√© √† la base de donn√©es '${dbName}'`);
    
    // Cr√©er les tables avec Drizzle
    console.log("üèóÔ∏è  Cr√©ation des tables...");
    const db = drizzle(dbClient, { schema });
    
    // Fermer la connexion
    await dbClient.end();
    console.log("‚úÖ Initialisation termin√©e avec succ√®s !");
    
  } catch (error) {
    console.error("‚ùå Erreur lors de l'initialisation:", error);
    
    if (error instanceof Error) {
      if (error.message.includes("ECONNREFUSED")) {
        console.log("\nüí° PostgreSQL n'est pas d√©marr√©");
        console.log("   V√©rifiez que le service PostgreSQL est en cours d'ex√©cution");
      } else if (error.message.includes("password authentication failed")) {
        console.log("\nüí° Mot de passe incorrect");
        console.log("   Mettez √† jour le mot de passe dans .env");
      } else {
        console.log(`\nüí° ${error.message}`);
      }
    }
    
    process.exit(1);
  }
}

initDatabase().catch(console.error);