#!/usr/bin/env node

import { config } from "dotenv";
import { databaseTMDBCache } from "./database-tmdb-cache.js";

// Charger les variables d'environnement
config();

async function bulkSyncTMDB() {
  console.log("üîÑ D√©marrage de la synchronisation en masse TMDB (500+ √©l√©ments)...");
  console.log("‚ö†Ô∏è  Cette op√©ration peut prendre plusieurs minutes et consomme des requ√™tes API");

  const startTime = Date.now();

  try {
    // Synchroniser 500 √©l√©ments populaires
    await databaseTMDBCache.bulkSync(500);

    const endTime = Date.now();
    const duration = Math.round((endTime - startTime) / 1000);

    // Afficher les statistiques finales
    const stats = await databaseTMDBCache.getCacheStats();
    console.log("\nüìä Statistiques finales du cache :");
    console.log(`   - Dur√©e totale: ${duration} secondes`);
    console.log(`   - Entr√©es totales: ${stats.totalEntries}`);
    console.log(`   - Entr√©es valides: ${stats.validEntries}`);
    console.log(`   - Entr√©es expir√©es: ${stats.expiredEntries}`);

    console.log("\n‚úÖ Synchronisation en masse TMDB termin√©e avec succ√®s!");
    console.log("üí° Votre application peut maintenant servir du contenu sans d√©pendre de l'API TMDB");

  } catch (error) {
    console.error("‚ùå Erreur lors de la synchronisation en masse TMDB:", error);
    process.exit(1);
  }
}

// V√©rifier si l'utilisateur confirme l'op√©ration
const args = process.argv.slice(2);
if (args.includes('--confirm')) {
  bulkSyncTMDB();
} else {
  console.log("üö® ATTENTION: Cette commande va synchroniser 500+ √©l√©ments TMDB");
  console.log("üí∞ Cela consomme des requ√™tes API (co√ªts potentiels)");
  console.log("‚è±Ô∏è  Cela peut prendre plusieurs minutes");
  console.log("");
  console.log("Pour confirmer l'ex√©cution, utilisez:");
  console.log("npm run bulk-sync-tmdb -- --confirm");
  console.log("");
  console.log("Ou directement:");
  console.log("tsx server/bulk-sync-tmdb.ts --confirm");
}